/*
 * SonarQube Client
 * Copyright (C) 2016-2023 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using FluentAssertions;
using Moq;
using Newtonsoft.Json;
using SonarQube.Client.Models;
using SonarQube.Client.Models.ServerSentEvents.ClientContract;

namespace SonarQube.Client.Tests.Models.ServerSentEvents
{
    [TestClass]
    public class TaintVulnerabilityRaisedServerEventTests
    {
        [TestMethod]
        public void Ctor_InvalidProjectKey_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent(null, "id1", "main", Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("projectKey");
        }

        [TestMethod]
        public void Ctor_InvalidKey_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", null, "main", Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("key");
        }

        [TestMethod]
        public void Ctor_InvalidBranch_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", "id1", null, Mock.Of<ITaintIssue>()); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("branch");
        }

        [TestMethod]
        public void Ctor_InvalidIssue_Throws()
        {
            Action act = () => { new TaintVulnerabilityRaisedServerEvent("MyProject", "id1", "branch", null); };

            act.Should().ThrowExactly<ArgumentNullException>().And.ParamName.Should().Be("issue");
        }

        [TestMethod]
        public void Deserialize_ServerEventDeserializedCorrectly()
        {
            const string serializedTaintVulnerabilityRaisedEvent = @"{
	""key"": ""taintKey"",
	""projectKey"": ""projectKey1"",
	""branch"": ""master"",
	""creationDate"": 123456789,
	""ruleKey"": ""javasecurity:S123"",
	""severity"": ""MAJOR"",
	""type"": ""VULNERABILITY"",
	""mainLocation"": {
		""filePath"": ""functions/taint.js"",
		""message"": ""blah blah"",
		""textRange"": {
			""startLine"": 17,
			""startLineOffset"": 10,
			""endLine"": 3,
			""endLineOffset"": 2,
			""hash"": ""hash""
		}
	},
	""flows"": [
		{
			""locations"": [
				{
					""filePath"": ""functions/taint.js"",
					""message"": ""sink: tainted value is used to perform a security-sensitive operation"",
					""textRange"": {
						""startLine"": 15,
						""startLineOffset"": 14,
						""endLine"": 6,
						""endLineOffset"": 7,
						""hash"": ""hash1""
					}
				},
				{
					""filePath"": ""functions/taint2.js"",
					""message"": ""sink: tainted value is used to perform a security-sensitive operation"",
					""textRange"": {
						""startLine"": 18,
						""startLineOffset"": 11,
						""endLine"": 4,
						""endLineOffset"": 3,
						""hash"": ""hash2""
					}
				}
			]
		}
	]
}";

            var result = JsonConvert.DeserializeObject<TaintVulnerabilityRaisedServerEvent>(serializedTaintVulnerabilityRaisedEvent);

            result.Should().NotBeNull();
            result.ProjectKey.Should().Be("projectKey1");
            result.Key.Should().Be("taintKey");
            result.Branch.Should().Be("master");
            result.Issue.Should().NotBeNull();

            result.Issue.RuleKey.Should().Be("javasecurity:S123");
            result.Issue.Severity.Should().Be(SonarQubeIssueSeverity.Major);
            result.Issue.Type.Should().Be(SonarQubeIssueType.Vulnerability);

            result.Issue.MainLocation.Should().NotBeNull();
            result.Issue.MainLocation.Message.Should().Be("blah blah");
            result.Issue.MainLocation.FilePath.Should().Be("functions/taint.js");
            result.Issue.MainLocation.TextRange.Should().NotBeNull();

            result.Issue.MainLocation.TextRange.StartLine.Should().Be(17);
            result.Issue.MainLocation.TextRange.StartLineOffset.Should().Be(10);
            result.Issue.MainLocation.TextRange.EndLine.Should().Be(3);
            result.Issue.MainLocation.TextRange.EndLineOffset.Should().Be(2);
            result.Issue.MainLocation.TextRange.Hash.Should().Be("hash");

            result.Issue.Flows.Should().NotBeNull();
            result.Issue.Flows.Length.Should().Be(1);
            result.Issue.Flows[0].Locations.Should().NotBeNull();
            result.Issue.Flows[0].Locations.Length.Should().Be(2);

            result.Issue.Flows[0].Locations[0].FilePath.Should().Be("functions/taint.js");
            result.Issue.Flows[0].Locations[0].Message.Should().Be("sink: tainted value is used to perform a security-sensitive operation");
            result.Issue.Flows[0].Locations[0].TextRange.Should().NotBeNull();

            result.Issue.Flows[0].Locations[0].TextRange.StartLine.Should().Be(15);
            result.Issue.Flows[0].Locations[0].TextRange.StartLineOffset.Should().Be(14);
            result.Issue.Flows[0].Locations[0].TextRange.EndLine.Should().Be(6);
            result.Issue.Flows[0].Locations[0].TextRange.EndLineOffset.Should().Be(7);
            result.Issue.Flows[0].Locations[0].TextRange.Hash.Should().Be("hash1");

            result.Issue.Flows[0].Locations[1].FilePath.Should().Be("functions/taint2.js");
            result.Issue.Flows[0].Locations[1].Message.Should().Be("sink: tainted value is used to perform a security-sensitive operation");
            result.Issue.Flows[0].Locations[1].TextRange.Should().NotBeNull();

            result.Issue.Flows[0].Locations[1].TextRange.StartLine.Should().Be(18);
            result.Issue.Flows[0].Locations[1].TextRange.StartLineOffset.Should().Be(11);
            result.Issue.Flows[0].Locations[1].TextRange.EndLine.Should().Be(4);
            result.Issue.Flows[0].Locations[1].TextRange.EndLineOffset.Should().Be(3);
            result.Issue.Flows[0].Locations[1].TextRange.Hash.Should().Be("hash2");
        }
    }
}
